readCounts <- read.delim(url("https://raw.githubusercontent.com/SydneyBioX/localWorkshop/master/data/counts.txt"), check.names = FALSE)
readCounts <- as.matrix(readCounts)
sampleInfo <- read.delim(url("https://raw.githubusercontent.com/SydneyBioX/localWorkshop/master/data/samples.txt"), check.names = FALSE)
head(sampleInfo)
nrow(sampleInfo)
table(sampleInfo[, "Response"])
removeClinical <- which(is.na(sampleInfo[, "Response"]))
readCounts <- readCounts[, -removeClinical]
sampleInfo <- sampleInfo[-removeClinical, ]
ignoreClinical <- match(c("ID", "Status", "Survival Time"), colnames(sampleInfo))
sampleInfo <-sampleInfo[, -ignoreClinical]
readCounts[1:5, 1:5]
dim(readCounts)
samplesCounts <- colSums(readCounts)
countsSummary <- summary(samplesCounts)
countsSummary
removeGenes <- apply(readCounts, 1, function(geneCounts) sum(geneCounts == 0) > 200)
readCounts <- readCounts[!removeGenes, ]
boxplot(readCounts[, 1:50], ylim = c(0, 1500),
main = "Gene Counts", ylab = "Count", cex = 0.25, xaxt = 'n')
removeRNA <- which(samplesCounts < countsSummary["1st Qu."] |
samplesCounts > countsSummary["3rd Qu."])
readCounts <- readCounts[, -removeRNA]
sampleInfo <- sampleInfo[-removeRNA, ]
classes <- sampleInfo[, "Response"]
table(classes)
scaleFactors <- colSums(readCounts)[1] / colSums(readCounts)
scaledCounts <- t(t(readCounts) * scaleFactors)
boxplot(scaledCounts[, 1:50], ylim = c(0, 1500),
main = "Gene Counts", ylab = "Scaled Count", cex = 0.25, xaxt = 'n')
boxplot(readCounts[, 1:5], ylim = c(0, 1500),
main = "Gene Counts", ylab = "Count", cex = 0.25, xaxt = 'n')
boxplot(scaledCounts[, 1:5], ylim = c(0, 1500),
main = "Gene Counts", ylab = "Scaled Count", cex = 0.25, xaxt = 'n')
removeRNA <- which(samplesCounts < countsSummary["1st Qu."] |
samplesCounts > countsSummary["3rd Qu."])
readCounts <- readCounts[, -removeRNA]
sampleInfo <- sampleInfo[-removeRNA, ]
classes <- sampleInfo[, "Response"]
table(classes)
removeRNA <- which(samplesCounts < countsSummary["1st Qu."] |
samplesCounts > countsSummary["3rd Qu."])
readCounts <- readCounts[, -removeRNA]
sampleInfo <- sampleInfo[-removeRNA, ]
classes <- sampleInfo[, "Response"]
table(classes)
readCounts <- read.delim(url("https://raw.githubusercontent.com/SydneyBioX/localWorkshop/master/data/counts.txt"), check.names = FALSE)
readCounts <- as.matrix(readCounts)
sampleInfo <- read.delim(url("https://raw.githubusercontent.com/SydneyBioX/localWorkshop/master/data/samples.txt"), check.names = FALSE)
table(sampleInfo[, "Response"])
removeClinical <- which(is.na(sampleInfo[, "Response"]))
readCounts <- readCounts[, -removeClinical]
sampleInfo <- sampleInfo[-removeClinical, ]
ignoreClinical <- match(c("ID", "Status", "Survival Time"), colnames(sampleInfo))
sampleInfo <-sampleInfo[, -ignoreClinical]
samplesCounts <- colSums(readCounts)
countsSummary <- summary(samplesCounts)
countsSummary
removeGenes <- apply(readCounts, 1, function(geneCounts) sum(geneCounts == 0) > 200)
readCounts <- readCounts[!removeGenes, ]
removeRNA <- which(samplesCounts < countsSummary["1st Qu."] |
samplesCounts > countsSummary["3rd Qu."])
readCounts <- readCounts[, -removeRNA]
sampleInfo <- sampleInfo[-removeRNA, ]
classes <- sampleInfo[, "Response"]
table(classes)
scaleFactors <- colSums(readCounts)[1] / colSums(readCounts)
scaledCounts <- t(t(readCounts) * scaleFactors)
library(EDASeq)
source("https://bioconductor.org/biocLite.R")
biocLite("EDASeq")
library(EDASeq)
AMLExpressionSet <- newSeqExpressionSet(scaledCounts)
meanVarPlot(AMLExpressionSet, log = TRUE, main = "Mean-Variance Plot")
library(DESeq2)
measurementsVS <- varianceStabilizingTransformation(readCounts)
normCounts(AMLExpressionSet) <- measurementsVS
meanVarPlot(AMLExpressionSet, xlim = c(3, 9), ylim = c(0, 9), main = "Mean-Variance Plot")
geneVariances <- apply(measurementsVS, 1, var)
mostVariable <- order(geneVariances, decreasing = TRUE)[1:2000]
measurementsVS <- measurementsVS[mostVariable, ]
measurementsVS[1:6, 1:6]
measurementsVStrain <- measurementsVS[, 1:59]
measurementsVStest <- measurementsVS[, 60:117]
clinicalTrain <- sampleInfo[1:59, ]
clinicalTest <- sampleInfo[60:117, ]
classesTrain <- classes[1:59]
classesTest <- classes[60:117]
head(clinicalTrain)
fusionColumn <- match("RUNX1-RUNX1T1 Fusion", colnames(clinicalTrain))
LRclassifier <- glm(Response ~ ., "binomial", clinicalTrain[, -fusionColumn])
LRprobabilities <- predict(LRclassifier, clinicalTest[, -fusionColumn], type = "response")
LRclasses <- ifelse(LRprobabilities > 0.5, levels(classes)[2], levels(classes)[1])
LRconfusion <- table(actual = classesTest, predicted = LRclasses)
LRconfusion
library(genefilter)
tStatistic <- rowttests(measurementsVStrain, classesTrain)[["statistic"]]
best10T <- order(abs(tStatistic), decreasing = TRUE)
library(sparsediscrim)
DLDAclassifier <- dlda(t(measurementsVStrain[best10T, ]), classesTrain)
testResult <- predict(DLDAclassifier, t(measurementsVStest))
DLDAclasses <- testResult[["class"]]
DLDAconfusion <- table(actual = classesTest, predicted = DLDAclasses)
DLDAconfusion
trainSensitive <- measurementsVStrain[, classesTrain == "Sensitive"]
trainResistant <- measurementsVStrain[, classesTrain == "Resistant"]
trainSensitive <- as.list(as.data.frame(t(trainSensitive)))
trainResistant <- as.list(as.data.frame(t(trainResistant)))
KS <- mapply(function(sensValues, resValues)
ks.test(sensValues, resValues)[["statistic"]],
trainSensitive, trainResistant)
best10KS <- order(abs(KS), decreasing = TRUE)
library(ClassifyR)
classifiedDM <- runTests(measurementsVS, classes, "AML", "Changes in Means",
permutations = 20, seed = 2018)
classifiedDM
# Permutation 1, folds 1 and 2.
features(classifiedDM)[[1]][1:2]
# Permutation 1
head(predictions(classifiedDM)[[1]])
frequencies <- distribution(classifiedDM, plot = FALSE)
frequencies <- distribution(classifiedDM, plot = FALSE)
source("https://bioconductor.org/biocLite.R")
biocLite("ClassifyR")
remove.packages("ClassifyR", lib="~/R/win-library/3.5")
source("https://bioconductor.org/biocLite.R")
biocLite("ClassifyR")
detach("package:ClassifyR", unload=TRUE)
library(ClassifyR)
source("https://bioconductor.org/biocLite.R")
biocLite("ClassifyR")
library(ClassifyR)
classifiedDM <- runTests(measurementsVS, classes, "AML", "Changes in Means",
permutations = 20, seed = 2018)
classifiedDM
features(classifiedDM)[[1]][1:2]
# Permutation 1
head(predictions(classifiedDM)[[1]])
frequencies <- distribution(classifiedDM, plot = FALSE)
frequencies <- sort(frequencies, decreasing = TRUE)
head(frequencies)
plotFeatureClasses(measurementsVS, classes, targets = names(frequencies)[1],
whichNumericPlots = "density", xAxisLabel = "RNA-seq Abundance")
plotFeatureClasses(measurementsVS, sampleInfo[, "Gender"], targets = "ZFY",
whichNumericPlots = "density", xAxisLabel = "RNA-seq Abundance")
trainParams <- TrainParams(logisticRegressionTrainInterface)
predictParams <- PredictParams(logisticRegressionPredictInterface,
getClasses = function(result) result)
ignoreColumns <- match(c("ID", "Survival Time", "Status"), colnames(sampleInfo))
ignoreColumns
classifiedClinical <- runTests(DataFrame(sampleInfo[, -ignoreColumns]), "Response",
"AML", "Clinical",
params = list(trainParams, predictParams),
permutations = 20, seed = 2018)
readCounts <- read.delim(url("https://raw.githubusercontent.com/SydneyBioX/localWorkshop/master/data/counts.txt"), check.names = FALSE)
readCounts <- as.matrix(readCounts)
sampleInfo <- read.delim(url("https://raw.githubusercontent.com/SydneyBioX/localWorkshop/master/data/samples.txt"), check.names = FALSE)
removeClinical <- which(is.na(sampleInfo[, "Response"]))
readCounts <- readCounts[, -removeClinical]
sampleInfo <- sampleInfo[-removeClinical, ]
ignoreClinical <- match(c("ID", "Status", "Survival Time"), colnames(sampleInfo))
sampleInfo <-sampleInfo[, -ignoreClinical]
removeGenes <- apply(readCounts, 1, function(geneCounts) sum(geneCounts == 0) > 200)
readCounts <- readCounts[!removeGenes, ]
classes <- sampleInfo[, "Response"]
table(classes)
dim(readCounts)
scaleFactors <- colSums(readCounts)[1] / colSums(readCounts)
scaledCounts <- t(t(readCounts) * scaleFactors)
library(EDASeq)
AMLExpressionSet <- newSeqExpressionSet(scaledCounts)
meanVarPlot(AMLExpressionSet, log = TRUE, main = "Mean-Variance Plot")
library(DESeq2)
measurementsVS <- varianceStabilizingTransformation(readCounts)
normCounts(AMLExpressionSet) <- measurementsVS
dds <- DESeqDataSetFromMatrix(countData = readCounts,
colData = colnames(readCounts),
design = ~ 1)
dim(readCounts)
dds <- DESeqDataSetFromMatrix(countData = readCounts,
colData = data.frame(colNames = colnames(readCounts)),
design = ~ 1)
samplesCounts <- colSums(counts(dds))
countsSummary <- summary(samplesCounts)
countsSummary
dds <- estimateSizeFactors(dds)
samplesCounts <- colSums(counts(dds))
countsSummary <- summary(samplesCounts)
countsSummary
samplesCounts <- colSums(array(dds))
samplesCounts <- colSums(assay(dds))
countsSummary <- summary(samplesCounts)
countsSummary
samplesCounts <- colSums(counts(dds,normalized=TRUE))
countsSummary <- summary(samplesCounts)
countsSummary
boxplot(counts(dds,normalized=TRUE)[, 1:50], ylim = c(0, 1500),
main = "Gene Counts", ylab = "Scaled Count", cex = 0.25, xaxt = 'n')
boxplot(counts(dds,normalized=TRUE)[, 1:50], ylim = c(0, 1500),
main = "Gene Counts", ylab = "Scaled Count", cex = 0.25, xaxt = 'n')
boxplot(counts(dds, normalize=TRUE)[, 1:50], ylim = c(0, 1500),
main = "Gene Counts", ylab = "Scaled Count", cex = 0.25, xaxt = 'n')
boxplot(counts(dds)[, 1:50], ylim = c(0, 1500),
main = "Gene Counts", ylab = "Counts", cex = 0.25, xaxt = 'n')
meanSdPlot(assay(dds))
library(DESeq2)
meanSdPlot(assay(dds))
meanSdPlot
??meanSdPlot
detach("package:DESeq2", unload=TRUE)
biocLite("DESeq2")
library("DESeq2")
remove.packages("DESeq2", lib="~/R/win-library/3.5")
biocLite("DESeq2")
